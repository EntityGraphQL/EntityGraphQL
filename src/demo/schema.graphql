schema {
    query: RootQuery
    mutation: Mutation
}

scalar Int
scalar Float
scalar Boolean
scalar String
scalar ID
scalar Date


enum Genre {
	"""Action movie type"""
	Action
	"""Drama movie type"""
	Drama
	"""Comedy movie type"""
	Comedy
	"""Horror movie type"""
	Horror
	"""Scifi movie type"""
	Scifi
}


type RootQuery {
	"""Pagination. [defaults: page = 1, pagesize = 10]"""
	actorPager(page: Int!, pagesize: Int!, search: String): PersonPagination
	"""List of actors"""
	actors(filter: String): [Person!]
	"""List of directors"""
	directors: [Person!]
	"""Return a Movie by its Id"""
	movie(id: Int!): Movie
	"""Collection of Movies"""
	movies: [Movie!]
	"""Collection of Peoples"""
	people: [Person!]
	"""Return a Person by its Id"""
	person(id: Int!): Person
	"""List of writers"""
	writers: [Person!]

}

"""Information about subscriptions"""
type SubscriptionType {
	name: String
}

type Movie {
	id: Int!
	name: String
	"""Enum of Genre"""
	genre: Genre!
	released: Date!
	"""Actors in the movie"""
	actors: [Person!]
	"""Writers in the movie"""
	writers: [Person!]
	director: Person
	directorId: Int
	rating: Float!
}

type Actor {
	personId: Int!
	person: Person
	movieId: Int!
	movie: Movie
}

type Person {
	id: Int!
	firstName: String!
	lastName: String!
	dob: Date!
	"""Movies they acted in"""
	actorIn: [Movie!]
	"""Movies they wrote"""
	writerOf: [Movie!]
	directorOf: [Movie!]
	died: Date
	isDeleted: Boolean!
	"""Person's name"""
	name: String
	"""Show the person's age"""
	age: Int!
	"""Get Director of based on filter"""
	filteredDirectorOf(filter: String): [Movie!]
}

type Writer {
	personId: Int!
	person: Person
	movieId: Int!
	movie: Movie
}

"""Actor Pagination"""
type PersonPagination {
	"""total records to match search"""
	total: Int!
	"""total pages based on page size"""
	pageCount: Int!
	"""collection of people"""
	people: [Person!]!
}

"""Detail item"""
input Detail {
	description: String
}

type Mutation {
	"""Example of a mutation that takes 0 arguments"""
	exampleNoArgs: Movie
	"""Example of a mutation that does not use the context or argments but does use registered services"""
	exampleNoArgsWithService: Int!
	"""Add a new Movie object"""
	addMovie(name: String!, rating: Float!, details: [Detail!], genre: Genre!, released: Date!): Movie
	addActor(firstName: String, lastName: String, movieId: Int!): Person
	addActor2(firstName: String, lastName: String, movieId: Int!): [Person!]

}